import asyncio
import logging
import pandas as pd
import torch
from datetime import datetime
from transformers import AutoModelForSequenceClassification, AutoTokenizer
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import nest_asyncio  # –§–∏–∫—Å –æ—à–∏–±–∫–∏ "This event loop is already running"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "7820174844:AAEpPab-Wt7iNSO0GkEjEdSKrYpNju3G8Z0"
GROUP_ID = -1002298203209  # –£–∫–∞–∂–∏ ID –≥—Ä—É–ø–ø—ã
EXCEL_FILE = "filtered_messages_context.xlsx"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
model_path = "./trained_model"  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
device = torch.device("mps") if torch.backends.mps.is_built() else "cpu"

tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSequenceClassification.from_pretrained(model_path).to(device)

# üîπ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
def classify_message_with_context(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –ü—Ä–æ–±–ª–µ–º–∞, –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –î—Ä—É–≥–æ–µ."""
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding="max_length", max_length=128).to(device)

    with torch.no_grad():
        outputs = model(**inputs)

    predicted_label = torch.argmax(outputs.logits, dim=1).item()
    label_map = {0: "–ü—Ä–æ–±–ª–µ–º–∞", 1: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 2: "–î—Ä—É–≥–æ–µ"}

    return label_map.get(predicted_label, "–î—Ä—É–≥–æ–µ")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ Excel."
    )

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    if update.message and update.message.chat_id == GROUP_ID:
        text = update.message.text
        date = datetime.fromtimestamp(update.message.date.timestamp())

        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} | –î–∞—Ç–∞: {date}")

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = classify_message_with_context(text)

        if message_type != "–î—Ä—É–≥–æ–µ":
            try:
                df = pd.read_excel(EXCEL_FILE)
            except FileNotFoundError:
                df = pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", "–°–æ–æ–±—â–µ–Ω–∏–µ"])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            new_row = {"–î–∞—Ç–∞": date, "–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è": message_type, "–°–æ–æ–±—â–µ–Ω–∏–µ": text}
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
            df.to_excel(EXCEL_FILE, index=False, engine="openpyxl")
            logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Excel: {new_row}")

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_old_messages(context: CallbackContext):
    logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    async for update in context.application.bot.get_updates(offset=None, timeout=10):
        if update.message and update.message.chat_id == GROUP_ID:
            await handle_message(update, context)

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Chat(GROUP_ID) & filters.TEXT, handle_message))

    # –ù–∞—Å—Ç—Ä–æ–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler.add_job(handle_old_messages, "interval", minutes=5, args=[application])
    scheduler.start()

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    await application.run_polling()

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())