import logging
import os
import datetime
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from telegram.error import TelegramError

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_SHEETS_FOLDER_ID = os.getenv("GOOGLE_SHEETS_FOLDER_ID")
SERVICE_ACCOUNT_FILE = "/etc/secrets/google_sheets_creds.json"

if not os.path.exists(SERVICE_ACCOUNT_FILE):
    logger.error(f"–§–∞–π–ª service_account.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {SERVICE_ACCOUNT_FILE}")
    raise FileNotFoundError(f"–§–∞–π–ª {SERVICE_ACCOUNT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

logger.info(f"‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {SERVICE_ACCOUNT_FILE}")

if not TOKEN or not GOOGLE_SHEETS_FOLDER_ID:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ GOOGLE_SHEETS_FOLDER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API
try:
    creds = Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(creds)
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API!")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google API: {e}")
    raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheet
def create_or_get_sheet():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    file_name = f"bot_{today}"
    try:
        sh = gc.open(file_name)
        logger.info(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É: {file_name}")
        return sh
    except gspread.exceptions.SpreadsheetNotFound:
        try:
            sh = gc.create(file_name)
            sh.share("grebennikova.ekaterina95@gmail.com", perm_type="user", role="writer")
            file_id = sh.id
            gc.request("PATCH", f"https://www.googleapis.com/drive/v3/files/{file_id}", json={"parents": [GOOGLE_SHEETS_FOLDER_ID]})
            worksheet = sh.get_worksheet(0)
            headers = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", "–ò–º—è/–ù–∏–∫", "ID —á–∞—Ç–∞", "ID —Å–æ–æ–±—â–µ–Ω–∏—è", "–¢–µ–∫—Å—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]
            worksheet.append_row(headers)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}")
            return sh
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Sheet: {e}")
            return None

async def save_message_to_sheet(update: Update, context: CallbackContext):
    if not update or not update.message:
        logger.error("‚ùå –û—à–∏–±–∫–∞: update –∏–ª–∏ update.message = None")
        return
    message = update.message
    chat = message.chat
    sh = create_or_get_sheet()
    if not sh:
        return
    worksheet = sh.get_worksheet(0)
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    group_name = chat.title if chat.type in ["group", "supergroup"] else "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    username = message.from_user.username or message.from_user.full_name
    data = [now, group_name, username, chat.id, message.message_id, message.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", "", ""]
    try:
        worksheet.append_row(data)
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {sh.title}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API: {context.error}")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_message_to_sheet))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
