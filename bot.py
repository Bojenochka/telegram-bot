import logging
import os
import datetime
import json
import threading
import requests
import gspread
from flask import Flask
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CallbackContext

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
GOOGLE_SHEETS_FOLDER_ID = os.getenv("GOOGLE_SHEETS_FOLDER_ID")
SERVICE_ACCOUNT_FILE = "/etc/secrets/google_sheets_creds.json"
LAST_MESSAGE_FILE = "last_message_id.json"

if not os.path.exists(SERVICE_ACCOUNT_FILE):
    logger.error(f"–§–∞–π–ª {SERVICE_ACCOUNT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    raise FileNotFoundError(f"–§–∞–π–ª {SERVICE_ACCOUNT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if not TOKEN or not GOOGLE_SHEETS_FOLDER_ID:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ GOOGLE_SHEETS_FOLDER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API ---
try:
    creds = Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(creds)
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API!")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google API: {e}")
    raise

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---
def load_last_message_id():
    try:
        with open(LAST_MESSAGE_FILE, "r") as f:
            return json.load(f).get("last_id", 0)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0

def save_last_message_id(message_id):
    with open(LAST_MESSAGE_FILE, "w") as f:
        json.dump({"last_id": message_id}, f)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è Google Sheet –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É ---
def move_sheet_to_folder(file_id):
    headers = {
        "Authorization": f"Bearer {creds.token}",
        "Content-Type": "application/json",
    }
    url = f"https://www.googleapis.com/drive/v3/files/{file_id}"
    response = requests.patch(url, headers=headers, json={"parents": [GOOGLE_SHEETS_FOLDER_ID]})

    if response.status_code == 200:
        logger.info("üìÇ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É Google Drive")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.text}")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Google Sheet ---
def create_or_get_sheet():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    file_name = f"bot_{today}"

    try:
        sh = gc.open(file_name)
        worksheet = sh.get_worksheet(0)
    except gspread.exceptions.SpreadsheetNotFound:
        try:
            sh = gc.create(file_name)
            sh.share("grebennikova.ekaterina95@gmail.com", perm_type="user", role="writer")

            move_sheet_to_folder(sh.id)

            if not sh.worksheets():
                worksheet = sh.add_worksheet(title="Sheet1", rows="100", cols="10")
            else:
                worksheet = sh.get_worksheet(0)

            headers = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", "–ò–º—è/–ù–∏–∫", "ID —á–∞—Ç–∞", "ID —Å–æ–æ–±—â–µ–Ω–∏—è", "–¢–µ–∫—Å—Ç", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"]
            worksheet.append_row(headers)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Sheet: {e}")
            return None

    return worksheet

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É ---
async def save_message_to_sheet(update: Update, context: CallbackContext):
    if not update or not update.message:
        return

    message = update.message
    chat = message.chat
    message_id = message.message_id

    last_message_id = load_last_message_id()
    if message_id <= last_message_id:
        return

    worksheet = create_or_get_sheet()
    if not worksheet:
        return

    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    group_name = chat.title if chat.type in ["group", "supergroup"] else "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    username = message.from_user.username or message.from_user.full_name
    chat_id = chat.id
    text = message.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"

    worksheet.append_row([now, group_name, username, chat_id, message_id, text, "", ""])
    save_last_message_id(message_id)

# --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Flask ---
app = Flask(__name__)

@app.route('/')
def index():
    return "OK", 200

@app.route('/status')
def status():
    return {"status": "running", "bot": "active"}, 200

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, threaded=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_message_to_sheet))
    application.run_polling()

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    main()